From 55bb816bf566f50791083cf3c4d4f5d2b93243c2 Mon Sep 17 00:00:00 2001
From: ricolin <rlin@vexxhost.com>
Date: Mon, 24 Mar 2025 16:27:58 +0800
Subject: [PATCH 4/9] Add Listener sync logic

This patch adds the logic to sync a Listener entity from
the Octavia database, correcting any discrepancies in fields or
creating it if it does not exist in the OVN LB related on
OVN Northbound (NB) database.

Future patches will incrementally add support for syncing the
remaining entities.

Related-Bug: #2045415

Co-authored-by: Fernando Royo <froyo@redhat.com>
Co-authored-by: Rico Lin <ricolin@ricolky.com>
Change-Id: Ibf39a73386eed1e00c7ce39e60274e028df0cced
---
 ovn_octavia_provider/driver.py | 32 ++++++++++++++
 ovn_octavia_provider/helper.py | 77 ++++++++++++++++++++++++++++++++++
 2 files changed, 109 insertions(+)

diff --git a/ovn_octavia_provider/driver.py b/ovn_octavia_provider/driver.py
index e69ebe4..a18fad1 100644
--- a/ovn_octavia_provider/driver.py
+++ b/ovn_octavia_provider/driver.py
@@ -90,6 +90,20 @@ class OvnProviderDriver(driver_base.ProviderDriver):
                         'admin_state_up': admin_state_up}
         return request_info
 
+    def _get_listener_request_info(self, listener):
+        self._check_for_supported_protocols(listener.protocol)
+        self._check_for_allowed_cidrs(listener.allowed_cidrs)
+        admin_state_up = listener.admin_state_up
+        if isinstance(admin_state_up, o_datamodels.UnsetType):
+            admin_state_up = True
+        request_info = {'id': listener.listener_id,
+                        'protocol': listener.protocol,
+                        'loadbalancer_id': listener.loadbalancer_id,
+                        'protocol_port': listener.protocol_port,
+                        'default_pool_id': listener.default_pool_id,
+                        'admin_state_up': admin_state_up}
+        return request_info
+
     def loadbalancer_create(self, loadbalancer):
         request = {'type': ovn_const.REQ_TYPE_LB_CREATE,
                    'info': self._get_loadbalancer_request_info(
@@ -550,6 +564,12 @@ class OvnProviderDriver(driver_base.ProviderDriver):
             # TODO(froyo): By now just syncing LB only
             status = self._ovn_helper.lb_create(
                 self._get_loadbalancer_request_info(loadbalancer))
+            if not isinstance(loadbalancer.listeners, o_datamodels.UnsetType):
+                status[constants.LISTENERS] = []
+                for listener in loadbalancer.listeners:
+                    status_listener = self._ovn_helper.listener_create(
+                        self._get_listener_request_info(listener))
+                    status[constants.LISTENERS].append(status_listener)
             self._ovn_helper._update_status_to_octavia(status)
         else:
             # Load Balancer found, check LB and listener/pool/member/hms
@@ -560,6 +580,12 @@ class OvnProviderDriver(driver_base.ProviderDriver):
                     "found checking other entities related")
                 self._ovn_helper.lb_sync(
                     self._get_loadbalancer_request_info(loadbalancer), ovn_lb)
+                # Listener
+                if not isinstance(loadbalancer.listeners,
+                                  o_datamodels.UnsetType):
+                    for listener in loadbalancer.listeners:
+                        self._ovn_helper.listener_sync(
+                            self._get_listener_request_info(listener), ovn_lb)
                 status = self._ovn_helper._get_current_operating_statuses(
                     ovn_lb)
                 self._ovn_helper._update_status_to_octavia(status)
@@ -575,4 +601,10 @@ class OvnProviderDriver(driver_base.ProviderDriver):
             provider_lb = (
                 self._ovn_helper._octavia_driver_lib.get_loadbalancer(lb.id)
             )
+
+            listeners = provider_lb.listeners or []
+            provider_lb.listeners = [
+                o_datamodels.Listener.from_dict(listener)
+                for listener in listeners
+            ] if listeners else o_datamodels.Unset
             self._ensure_loadbalancer(provider_lb)
diff --git a/ovn_octavia_provider/helper.py b/ovn_octavia_provider/helper.py
index 14825d3..f73dd1f 100644
--- a/ovn_octavia_provider/helper.py
+++ b/ovn_octavia_provider/helper.py
@@ -599,6 +599,50 @@ class OvnProviderHelper():
                               "router %s: %s", ovn_lb.uuid, ovn_lr.uuid,
                               str(e))
 
+    def _build_listener_info(self, listener, external_ids):
+        """Build listener key and listener info."""
+        listener_key = self._get_listener_key(
+            listener.get(constants.ID),
+            is_enabled=listener.get(constants.ADMIN_STATE_UP)
+        )
+        pool_key = ''
+        if listener.get(constants.DEFAULT_POOL_ID):
+            pool_key = self._get_pool_key(
+                listener.get(constants.DEFAULT_POOL_ID))
+        external_ids[listener_key] = self._make_listener_key_value(
+            listener[constants.PROTOCOL_PORT], pool_key
+        )
+        listener_info = {listener_key: external_ids[listener_key]}
+        return listener_key, listener_info
+
+    def _update_listener_key_if_needed(self, listener_key, listener_info,
+                                       ovn_lb, commands):
+        """Update listener key on OVN LoadBalancer if needed."""
+        prev_listener_key_content = ovn_lb.external_ids.get(listener_key, '')
+        if (listener_key not in ovn_lb.external_ids or
+                listener_info.get(listener_key) != prev_listener_key_content):
+            commands.append(
+                self.ovn_nbdb_api.db_set(
+                    'Load_Balancer',
+                    ovn_lb.uuid,
+                    ('external_ids', listener_info)
+                )
+            )
+
+    def _update_protocol_if_needed(self, listener, ovn_lb, commands):
+        """Update protocol on OVN LoadBalancer if needed."""
+        current_protocol = ''
+        if ovn_lb.protocol:
+            current_protocol = ovn_lb.protocol[0].lower()
+        listener_protocol = str(listener.get(constants.PROTOCOL)).lower()
+        if current_protocol != listener_protocol:
+            commands.append(
+                self.ovn_nbdb_api.db_set(
+                    'Load_Balancer', ovn_lb.uuid,
+                    ('protocol', listener_protocol)
+                )
+            )
+
     def _lb_status(self, loadbalancer, provisioning_status, operating_status):
         """Return status for the LoadBalancer."""
         return {
@@ -1753,6 +1797,39 @@ class OvnProviderHelper():
                  constants.PROVISIONING_STATUS: constants.ACTIVE}]}
         return status
 
+    def listener_sync(self, listener, ovn_lb):
+        """Sync Listener object with an OVN LoadBalancer
+
+        The method performs the following steps:
+        1. Update listener key on OVN Loadbalancer external_ids if needed
+        2. Update OVN LoadBalancer protocol from Listener info if needed
+        3. Refresh OVN LoadBalancer vips
+
+        :param listener: The source listener object from Octavia DB
+        :param ovn_lb: The OVN LoadBalancer object that needs to be sync
+        """
+        commands = []
+        external_ids = copy.deepcopy(ovn_lb.external_ids)
+
+        listener_key, listener_info = self._build_listener_info(
+            listener, external_ids)
+        self._update_listener_key_if_needed(
+            listener_key, listener_info, ovn_lb, commands)
+        self._update_protocol_if_needed(listener, ovn_lb, commands)
+
+        try:
+            commands.extend(self._refresh_lb_vips(
+                ovn_lb, external_ids, is_sync=True))
+        except Exception as e:
+            LOG.exception(f"Failed to refresh LB VIPs: {e}")
+            return
+
+        try:
+            self._execute_commands(commands)
+        except Exception as e:
+            LOG.exception(f"Failed to execute commands for listener sync: {e}")
+            return
+
     def listener_delete(self, listener):
         status = {
             constants.LISTENERS: [
-- 
2.25.1

